"""
Author: Rohan Ramasamy
Date: 28/10/2017

Tests for generation of generic electric fields from analytic sources
"""

import unittest
import numpy as np

from plasma_physics.pysrc.simulation.pic.algo.fields.electric_fields.generic_e_fields import PointField
from plasma_physics.pysrc.simulation.pic.algo.geometry.vector_ops import magnitude


class PointFieldTest(unittest.TestCase):
    def test_electric_field(self):
        """
        Function to test the electric field generated PointField
        class

        :return:
        """
        field = PointField(1.0, 1.0, np.zeros(3))
        radius = field.radius
        rho = field.rho
        total_charge = rho * 4.0 / 3.0 * np.pi * radius ** 3

        # Sample at random points
        seed = 1
        num_tests = 1000
        np.random.seed(seed)
        sample_point = np.random.uniform(low=1.0, high=100.0, size=(3, num_tests)) * radius

        for i in range(sample_point.shape[1]):
            E = field.e_field(sample_point[:, i])
            E_mag = magnitude(E)

            self.assertAlmostEqual(total_charge / (4.0 * np.pi * magnitude(sample_point[:, i]) ** 2 * PointField.epsilon),
                                   E_mag)

    def test_potential_field(self):
        """
        Function to test the potential field generated by PointField
        class

        :return:
        """
        field = PointField(1.0, 1.0, np.zeros(3))
        radius = field.radius
        rho = field.rho
        total_charge = rho * 4.0 / 3.0 * np.pi * radius ** 3

        # Sample at random points
        seed = 1
        num_tests = 1000
        np.random.seed(seed)
        sample_point = np.random.uniform(low=1.0, high=100.0, size=(3, num_tests)) * radius

        for i in range(sample_point.shape[1]):
            V = field.v_field(sample_point[:, i])

            self.assertAlmostEqual(total_charge / (4.0 * np.pi * magnitude(sample_point[:, i]) * PointField.epsilon), V)


if __name__ == '__main__':
    unittest.main()

